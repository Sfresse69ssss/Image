/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BodyType as PrismaBodyType,
  Features as PrismaFeatures,
} from "@prisma/client";

export class BodyTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BodyTypeCountArgs, "select">): Promise<number> {
    return this.prisma.bodyType.count(args);
  }

  async bodyTypes(
    args: Prisma.BodyTypeFindManyArgs
  ): Promise<PrismaBodyType[]> {
    return this.prisma.bodyType.findMany(args);
  }
  async bodyType(
    args: Prisma.BodyTypeFindUniqueArgs
  ): Promise<PrismaBodyType | null> {
    return this.prisma.bodyType.findUnique(args);
  }
  async createBodyType(
    args: Prisma.BodyTypeCreateArgs
  ): Promise<PrismaBodyType> {
    return this.prisma.bodyType.create(args);
  }
  async updateBodyType(
    args: Prisma.BodyTypeUpdateArgs
  ): Promise<PrismaBodyType> {
    return this.prisma.bodyType.update(args);
  }
  async deleteBodyType(
    args: Prisma.BodyTypeDeleteArgs
  ): Promise<PrismaBodyType> {
    return this.prisma.bodyType.delete(args);
  }

  async findFeaturesItems(
    parentId: string,
    args: Prisma.FeaturesFindManyArgs
  ): Promise<PrismaFeatures[]> {
    return this.prisma.bodyType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .featuresItems(args);
  }
}
